Random research and FA algorithm (collision not computed):
***Does not handle collision***
# make sure it handles new computations on best route, when new agents come to push an object that is already being pushed
# make a "timer give up parameter" that makes the agent give up if it has been wayting alone by a resource for too long. 
# make restriction so all agents are within the map at all time
# make the gen_new_waypoint() function more detailed when we know more about the interfaces of the robots.

main()
    initialize map, M //grid should have the waypoint dist = 1
    initialize number, n, of agents
    object_found[] //indicator for if an agent has found an object
    route_per_agent[][] //each waypoint a agent passes is stored
    waypoint_counter_to_object[] //number of waypoints an agent has passed to find object
    waypoint_counter_to_homebase[]  //number of waypoints an agent has passed to return home
    end_condition = set an end goal for the whole colony
    sensor_obj = set sensor value that indicate the agent is close to an object
    epsilon = set range for agent coordinates   //possibly 0.1
    sufficient_light = set value for when we consider the sensored light 

    for range(i = 0, n-1) //initialize variables for each agent
        route_per_agent[i][0] = //coordinates of homebase
        waypoint_counter_to_object[i] = 0 //it has counted the waypoint of homebase
        waypoint_counter_to_homebase[i] = 0
        object_found[i] = false

    while !end_condition do
        for range(i = 0, n-1) //for each agent
            num_waypoints_left = (waypoint_counter_to_object[i] - waypoint_counter_to_homebase[i])
            sensor = read sensor value
            if object_found[i] and num_waypoints_left == -1 //object has been returned to homebase and agent is ready to explore again
                route_per_agent[i][0] = //coordinates of homebase
                waypoint_counter_to_object[i] = 0 //it has counted the waypoint of homebase
                waypoint_counter_to_homebase[i] = 0
                object_found[i] = false
            if object_found[i] then //returning to homebase with object
                received_waypoint_counter, received_route = receive() //receive route from other agents
                if received_waypoint_counter <= num_waypoints_left 
                    waypoint_counter_to_object[i] = received_waypoint_counter
                    route_per_agent[i] = received_route
                    waypoint_counter_to_homebase[i] = 0
                else
                    send(num_waypoints_left, route_per_agent[i][range (0, num_waypoints_left)])
                move(i, object_found[i], waypoint_counter_to_object[i], waypoint_counter_to_homebase[i], route_per_agent[i], sufficient_light) //move the agent and possibly object
            else if sensor >= sensor_obj then //finds object
                object_found[i] = true
                received_waypoint_counter, received_route = receive() //receive route from other agents
                if received_waypoint_counter <= waypoint_counter_to_object[i]
                    waypoint_counter_to_object[i] = received_waypoint_counter
                    route_per_agent[i] = received_route
                    waypoint_counter_to_homebase[i] = 0
                else
                    send(waypoint_counter_to_object[i], route_per_agent[i])
                move(i, object_found[i], waypoint_counter_to_object[i], waypoint_counter_to_homebase[i], route_per_agent[i], sufficient_light) //move the agent and possibly object
            else //explores
                move(i, object_found[i], waypoint_counter_to_object[i], waypoint_counter_to_homebase[i], route_per_agent[i], sufficient_light)


move(agent, object_found, waypoint_counter_to_obj, waypoint_counter_to_homebase, agents_route, sufficient_light)
    agent_coor = the coordinates of the agent i at current time
    num_waypoint = waypoint_counter_to_obj - waypoint_counter_to_homebase
    next_waypoint_coor = agents_route[num_waypoint]
    if !((agent_coor + epsilon > next_waypoint_coor) and (agent_coor - epsilon < next_waypoint_coor)) //dobbelt check the math (if agent is within reach of next waypoint it has been moving towards)
        if object_found then //moving towards homebase
            waypoint_counter_to_homebase ++
            num_waypoint = waypoint_counter_to_obj - waypoint_counter_to_homebase
            next_waypoint_coor = agents_route[num_waypoint]
            set motor value of agent i towards next_waypoint_coor
            make agent i push the object in same direction of agent i
            agent_push = // true if agent can push object, false otherwise
            if !agent_push do 
                stop motor of agent i
                turn_on_light() //call for other agents
            else
                turn_of_lights()
        else //exploring
            curr_waypoint_coor = agents_route[waypoint_counter_to_obj]
            if waypoint_counter_to_obj >= 1 then
                prev_waypoint_coor = agents_route[waypoint_counter_to_obj-1]
            else
                prev_waypoint_coor = agents_route[waypoint_counter_to_obj]
            new_waypoint_coor = gen_new_waypoint(i, curr_waypoint_coor, prev_waypoint_coor, sufficient_light) 
            waypoint_counter_to_obj ++
            agents_route[waypoint_counter_to_obj] = new_waypoint_coor
            set motor value of agent i towards new_waypoint_coor     
    else //agent i has not reached waypoint yet
        if object_found then
            num_waypoint = waypoint_counter_to_obj - waypoint_counter_to_homebase
            next_waypoint_coor = agents_route[num_waypoint]
            set motor value of agent i towards next_waypoint_coor
            make agent i push the object in same direction of agent i
            agent_push = // true if agent can push object, false otherwise
            if !agent_push do 
                stop motor of agent i
                turn_on_light() //call for other agents
            else
                turn_of_lights()
        else //exploring
            waypoint_coor = agents_route[waypoint_counter_to_obj]
            set motor value of agent i towards waypoint_coor     




receive()
    received_waypoint_counter, received_route = listen for route from others
    if received_waypoint_counter == NULL //in case agent does not receive anything
        return (infinity, [])
    else
        return (received_waypoint_counter, received_route)


send(my_waypoint_counter, my_route)
    transmit(my_waypoint_counter, my_route) //transmit to other agents
     
gen_new_waypoint(agent, curr_waypoint_coor, prev_waypoint_coor, sufficient_light)
    light_sensor = ammount of light agent i receives
    if light_sensor >= sufficient_light //FA
        new_waypoint_coor = waypoint_in_light_dir(curr_waypoint_coor, prev_waypoint_coor) //find neighbouring waypoint in the direction of the light
        return new_waypoint_coor
    else
        new_waypoint_coor = randomly_select_new_waypoint(curr_waypoint_coor, prev_waypoint_coor) //from neighbouring waypoints (agent can not choose previously visited points). Consider edgecase where it is stuck in a path and can't move forward as it will revisit its previously points
        return new_waypoint_coor